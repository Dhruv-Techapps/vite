name: Deploy
run-name: Deploy to ${{ inputs.environment }} by @${{ github.actor }} on ${{ inputs.version || github.ref_name }}

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment of release'
        type: environment
        default: Development
        required: true
      deploy_options_page:
        description: 'Options Page to firebase hosting'
        type: boolean
        default: false
        required: true
      deploy_configs:
        description: 'Configs to firebase hosting'
        type: boolean
        default: false
        required: true
      upload_extension:
        description: 'Extension to chrome webstore'
        type: boolean
        default: false
        required: true
      publish_extension:
        description: 'Publish extension'
        type: boolean
        default: false
        required: true
      version:
        description: 'Version (v4.0.0.0)'
        type: string

jobs:
  main:
    name: Build & Bundle & Publish
    environment:
      name: ${{inputs.environment}}
      url: ${{ steps.release.outputs.url}}
    runs-on: ubuntu-latest
    permissions:
      contents: write
      actions: read
      discussions: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: https://npm.pkg.github.com
          scope: ${{github.repository_owner}}
          cache: 'npm'
      - uses: nrwl/nx-set-shas@v3
      - run: npm ci
      - name: Build Projects and Library
        run: |
          CMD="npx nx run-many -t build -p"

          # Conditionally add projects based on inputs
          PROJECTS=()
          if [[ "${{ inputs.deploy_options_page }}" == "true" ]]; then
            PROJECTS+=("acf-options-page")
          fi
          if [[ "${{ inputs.deploy_configs }}" == "true" ]]; then
            PROJECTS+=("acf-configs")
          fi
          if [[ "${{ inputs.upload_extension }}" == "true" ]]; then
            PROJECTS+=("acf-extension")
          fi

          # Append selected projects to CMD
          if [[ ${#PROJECTS[@]} -gt 0 ]]; then
            CMD="$CMD ${PROJECTS[*]}"
          fi

          CMD="$CMD --prod --base-href ${{ vars.PUBLIC_URL }} --verbose --skip-nx-cache"

          echo "Final Command: $CMD"
          eval $CMD
        env:
          NX_PUBLIC_NAME: ${{vars.NX_PUBLIC_NAME}}
          NX_PUBLIC_VARIANT: ${{vars.NX_PUBLIC_VARIANT}}
          NX_PUBLIC_CHROME_EXTENSION_ID: ${{vars.NX_PUBLIC_CHROME_EXTENSION_ID}}
          NX_PUBLIC_EDGE_EXTENSION_ID: ${{vars.NX_PUBLIC_EDGE_EXTENSION_ID || 'DEV'}}
          NX_PUBLIC_I18N: ${{vars.NX_PUBLIC_I18N}}
          NX_PUBLIC_GOOGLE_ANALYTICS_ID: ${{vars.NX_PUBLIC_GOOGLE_ANALYTICS_ID}}
          NX_PUBLIC_GOOGLE_ADS_SLOT: ${{vars.NX_PUBLIC_GOOGLE_ADS_SLOT}}
          NX_PUBLIC_GOOGLE_ADS_CLIENT: ${{vars.NX_PUBLIC_GOOGLE_ADS_CLIENT}}
          NX_PUBLIC_FIREBASE_API_KEY: ${{vars.NX_PUBLIC_FIREBASE_API_KEY}}
          NX_PUBLIC_FIREBASE_DATABASE_URL: ${{vars.NX_PUBLIC_FIREBASE_DATABASE_URL}}
          NX_PUBLIC_FIREBASE_PROJECT_ID: ${{vars.NX_PUBLIC_FIREBASE_PROJECT_ID}}
          NX_PUBLIC_FIREBASE_BUCKET: ${{vars.NX_PUBLIC_FIREBASE_BUCKET}}
          UNINSTALL_URL: ${{vars.UNINSTALL_URL}}
          TRACKING_ID: ${{vars.TRACKING_ID}}
          FUNCTION_URL: ${{vars.FUNCTION_URL}}
          DISCORD_CLIENT_ID: ${{vars.DISCORD_CLIENT_ID}}
          OAUTH_CLIENT_ID: ${{vars.OAUTH_CLIENT_ID}}
          EDGE_OAUTH_CLIENT_ID: ${{vars.EDGE_OAUTH_CLIENT_ID}}
          PUBLIC_URL: ${{vars.PUBLIC_URL}}
          NX_PUBLIC_RELEASE_VERSION: ${{inputs.version || github.ref_name}}
          API_SECRET: ${{vars.API_SECRET}}
          MEASUREMENT_ID: ${{vars.MEASUREMENT_ID}}
          NX_PUBLIC_EXTENSION_SENTRY_DSN: ${{vars.NX_PUBLIC_EXTENSION_SENTRY_DSN}}
          NX_PUBLIC_OPTIONS_PAGE_SENTRY_DSN: ${{vars.NX_PUBLIC_OPTIONS_PAGE_SENTRY_DSN}}
          SENTRY_AUTH_TOKEN: ${{secrets.SENTRY_AUTH_TOKEN}}
      - name: Print Environment Info
        run: npx nx report
      - name: Determine Firebase Target
        run: |
          VARIANT=$(echo "${{ vars.NX_PUBLIC_VARIANT }}" | tr '[:upper:]' '[:lower:]')
          TARGET="auto-clicker-auto-fill-$VARIANT"
          echo "TARGET=$TARGET" >> $GITHUB_ENV
      - name: Options Page to Firebase Hosting
        if: ${{ inputs.deploy_options_page }}
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          firebaseServiceAccount: '${{ secrets.FIREBASE_SERVICE_ACCOUNT }}'
          projectId: auto-clicker-autofill
          target: ${{ env.TARGET }}
          channelId: live
      - name: Configs to Firebase Hosting
        if: ${{ inputs.deploy_configs }}
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          firebaseServiceAccount: '${{ secrets.FIREBASE_SERVICE_ACCOUNT }}'
          projectId: auto-clicker-autofill
          target: auto-clicker-autofill-configs
          channelId: live
      - name: Bundle Projects
        if: ${{ inputs.upload_extension }}
        run: |
          cd dist/apps/acf-extension
          zip -r ../../../acf-extension-${{vars.NX_PUBLIC_VARIANT}}.zip .
          cd ../../../
      - name: Extension to Chrome Webstore
        if: ${{ inputs.upload_extension }}
        uses: mnao305/chrome-extension-upload@v5.0.0
        id: chrome-extension-upload
        with:
          file-path: acf-extension-${{vars.NX_PUBLIC_VARIANT}}.zip
          extension-id: ${{ vars.NX_PUBLIC_CHROME_EXTENSION_ID }}
          client-id: ${{ secrets.CLIENT_ID }}
          client-secret: ${{ secrets.CLIENT_SECRET }}
          refresh-token: ${{ secrets.REFRESH_TOKEN }}
          publish: ${{inputs.publish_extension}}
          glob: true
      - name: Release to Github
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/')
        id: release
        with:
          prerelease: ${{ vars.NX_PUBLIC_VARIANT == 'BETA' || vars.NX_PUBLIC_VARIANT == 'DEV'}}
          generate_release_notes: true
          discussion_category_name: 'Release'
